# RSA - Level 9

# See the attachment for the challenge code. The output is:
# 138728501052719695830997827983870257879591108626209095010716818754108501959050430927220695106906763908822395818876460759364322997020222845247478635848425558793671347756842735011885094468024344931360037542098264527076663690119553302046205282212602106990248442514444587909723612295871002063257141634196430659767
# 40254592670056897412607628206293101688805220813070436291135637864728213056255791064749974976546612178688674369066366922740751516162695397004586912385306024596939610039396946106249406597089442755317018963104229975283670995939592563335766562761230485826833361814955946571348001305529987233069227384314146133493

# === Attack Overview ===
# - Attack Type: Small-private-exponent attack (Boneh-Durfee lattice attack) 
# - Mathematical Attack
# - Weakness: Small private exponent d
# - Brief Attack Description:
#     This attack exploits the situation where the private exponent d is small 
#     relative to the modulus n. The Boneh-Durfee attack uses lattice reduction 
#     techniques (specifically LLL) to find the private exponent d when d is small 
#     enough. The attack constructs a lattice from the public key parameters and uses
#     the LLL algorithm to find a short vector that reveals the private exponent d.
#     This is a known weakness in RSA implementations when the private exponent is 
#     small, as it allows for the private key to be recovered without needing to 
#     factor the modulus n.

# === Attack Steps ===
# Steps to find the private exponent d (performed outside this script in SageMath):
# 1. Download the Boneh-Durfee attack implementation from:
#    https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage
# 2. Open boneh_durfee.sage in SageMath.
# 3. Replace the parameters `n`, `e` in the Sage script with the values given by the CTF (see below).
# 4. Play with the parameters delta and m to find the right values for the attack. (works with m = 8 and the default delta = .18)
# 5. Run the Sage script on https://sagecell.sagemath.org/. It will perform lattice-based computations (using LLL) to recover the private exponent d.
# 6. Record the output d from Sage:
#    d = 130907063345211827271830776605143751868490159532968572514045305424799065327009793
# 7. Once `d` is obtained, compute m = c^d mod n to decrypt the ciphertext.
# 8. Convert the resulting integer `m` back to bytes to retrieve the flag.

# === Flag ===
# CRYPTO25{ad59e771-a7bc-4148-b0c1-2a39ce339fc4}

from Crypto.Util.number import long_to_bytes

# Challenge-provided values
n = 138728501052719695830997827983870257879591108626209095010716818754108501959050430927220695106906763908822395818876460759364322997020222845247478635848425558793671347756842735011885094468024344931360037542098264527076663690119553302046205282212602106990248442514444587909723612295871002063257141634196430659767
c = 40254592670056897412607628206293101688805220813070436291135637864728213056255791064749974976546612178688674369066366922740751516162695397004586912385306024596939610039396946106249406597089442755317018963104229975283670995939592563335766562761230485826833361814955946571348001305529987233069227384314146133493
E = 60016485563460433620911462871489753027091796150597697863772440338904706321535832359517415034149374289955681381097544059467926029963755494161141305994584249448583991034102694954139120453335603006006970009433124857766494518747385902016093339683987307620366742481560543776055295663835860818720290861634213881385

# Private exponent recovered via Boneh-Durfee attack
d = 130907063345211827271830776605143751868490159532968572514045305424799065327009793

# Decrypt the ciphertext
m = pow(c, d, n)
flag = long_to_bytes(m)

print(flag.decode())
